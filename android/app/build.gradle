plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dev.flutter.flutter-gradle-plugin'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '23'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.23'

def keystoreProperties = new Properties()
def keystorePropertiesFile = project.file('key.properties')
if (keystorePropertiesFile.exists()) {
    println "Loading keystore properties from: ${keystorePropertiesFile.absolutePath}"
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    println "Keystore properties file not found at: ${keystorePropertiesFile.absolutePath}"
}

android {
    namespace 'com.alphaness.alphanessone'
    compileSdkVersion 36
    ndkVersion "27.0.12077973"

    defaultConfig {
        applicationId 'com.alphaness.alphanessone'
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 36
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    signingConfigs {
        release {
            println "Keystore properties: ${keystoreProperties}"
            println "Keystore file path: ${keystoreProperties['storeFile']}"
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                debugSymbolLevel 'SYMBOL_TABLE'
            }
        }
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'com.android.billingclient:billing-ktx:8.0.0'
    implementation 'androidx.activity:activity-ktx:1.9.3'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'
}
